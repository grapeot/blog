<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Computing Life</title><link href="http://grapeot.me/" rel="alternate"></link><link href="http://grapeot.me/feeds/computing.atom.xml" rel="self"></link><id>http://grapeot.me/</id><updated>2013-09-24T17:28:00-04:00</updated><entry><title>Automatic Email Notification on Github Pushes</title><link href="http://grapeot.me/automatic-email-notification-on-github-pushes.html" rel="alternate"></link><updated>2013-09-24T17:28:00-04:00</updated><author><name>Yan Wang</name></author><id>tag:grapeot.me,2013-09-24:automatic-email-notification-on-github-pushes.html</id><summary type="html">&lt;p&gt;It would be sweet if we can get auto email notifications whenever someone pushes to our github project.
Unfortunately, the default email service hook of github only supports 2 email addresses at most. 
Although putting everyone into a mailing list is one solution, for small teams like us, it's also convenient to get a quick php script to do this.&lt;/p&gt;
&lt;p&gt;The underlying process is, github provides a post-receiving &lt;a href="https://help.github.com/articles/post-receive-hooks"&gt;web hook&lt;/a&gt;. 
Whenever it receives a push, a URL specified by the user will be hit with a JSON payload about the details.
We then get a php script parsing the payload and send out the summary emails.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/grapeot/6692145"&gt;Example code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note &lt;code&gt;mail()&lt;/code&gt; function in php may need extra setup.
Check &lt;a href="http://grapeot.me/sending-emails-from-cygwin.html"&gt;here&lt;/a&gt; for a brief introduction about the configuration.&lt;br /&gt;
Of course this can be used to do more such as blog deployment.
&lt;a href="https://github.com/StephenPCG"&gt;Stephen Zhang&lt;/a&gt; got his blog deployed &lt;a href="https://github.com/StephenPCG/onebitbug.me/blob/master/cgi-bin/update.cgi"&gt;this way&lt;/a&gt;.&lt;/p&gt;</summary><category term="github"></category><category term="Linux"></category></entry><entry><title>Some Technical Details about KinectFusion</title><link href="http://grapeot.me/some-technical-details-about-kinectfusion.html" rel="alternate"></link><updated>2013-09-17T16:00:00-04:00</updated><author><name>Yan Wang</name></author><id>tag:grapeot.me,2013-09-17:some-technical-details-about-kinectfusion.html</id><summary type="html">&lt;p&gt;KinectFusion is a powerful 3D reconstruction technique based on Microsoft Kinect Sensor.
It's included in the Microsoft Kinect SDK, which is pretty easy to use. 
But if you wish to do some serious vision applications based on that, more technical details need to be figured out.
And here are some notes I took these days.&lt;/p&gt;
&lt;h2&gt;WorldToCamera matrix&lt;/h2&gt;
&lt;p&gt;Just as the name indicates, it's just the external parameter matrix of the camera (i.e. Kinect here), consisting of the rotation and the translation info.
You can get it from the &lt;code&gt;GetCurrentWorldToCameraTransform()&lt;/code&gt; function in the SDK.
More specifically, the matrix looks like&lt;/p&gt;
&lt;p&gt;$$\begin{bmatrix} R &amp;amp; t \\ 0 &amp;amp; 1 \end{bmatrix}.$$&lt;/p&gt;
&lt;p&gt;And to transform a 3D point in the global coordinates to the local 3D coordinates of the camera, one only needs to do&lt;/p&gt;
&lt;p&gt;$\begin{bmatrix} x_l \\ y_l \\ z_l \\ 1 \end{bmatrix} = \begin{bmatrix} R &amp;amp; t \\ 0 &amp;amp; 1 \\ \end{bmatrix} * \begin{bmatrix} x_g \\ y_g \\ z_g \\ 1 \end{bmatrix} $.&lt;/p&gt;
&lt;p&gt;From the code it's also easy to know the (inverse of the) internal matrix of the Kinect (optical) camera (when the resolution is $640 \times 480$).&lt;/p&gt;
&lt;p&gt;$F^{-1} = \begin{bmatrix} 594.21 &amp;amp; &amp;amp; 320 \\ &amp;amp; 591.04 &amp;amp; 240 \\ &amp;amp; &amp;amp; 1 \end{bmatrix}$,&lt;/p&gt;
&lt;p&gt;then the (homogeneous) coordinates of the point can be computed as&lt;/p&gt;
&lt;p&gt;$ \begin{bmatrix} u \\ v \\ 1 \end{bmatrix} = F^{-1} \begin{bmatrix} x_l/z_l \\ y_l/z_l \\ 1 \end{bmatrix} $&lt;/p&gt;
&lt;p&gt;To verify the correctness of your implementation, simple export two RGBD photos with &lt;code&gt;WorldToCamera&lt;/code&gt; matrices, manually label the same 3D point on the two depth photos, and see whether they get transformed to the same 3D coordinate. &lt;/p&gt;
&lt;h2&gt;RGB-depth alignment&lt;/h2&gt;
&lt;p&gt;In the previous verification experiment, the reason why we don't use optical photos to label is, direct export from Kinect SDK ends up with unaligned optical and depth photos.
That is, since the optical camera and the depth camera are not in the position (and have different view of angles), their photos are not aligned, or the depth in (u, v) in the depth photo is not the "depth" for the pixel at (u, v) in the optical photo.
To build applications involving both photos, you need to first align them, or in other words, warp the optical photo to fit the depth photo (or vice versa).&lt;/p&gt;
&lt;p&gt;It can be done with the SDK itself, with the function &lt;code&gt;CoordinateMapper.MapDepthFrameToColorFrame()&lt;/code&gt;.
Since there are detailed documents in MSDN, I'd save time here by leaving yourself read the documents.
But the MATLAB code is provided &lt;a href="https://gist.github.com/grapeot/6599423"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some assumption to use the code is, the file &lt;code&gt;imgfn&lt;/code&gt; stores the binary data directly exported from &lt;code&gt;ColorImageFrame.CopyPixelDataTo()&lt;/code&gt;, &lt;code&gt;dfn&lt;/code&gt; stores the binary data exported from &lt;code&gt;FusionFloatImageFrame.CopyPixelDataTo()&lt;/code&gt;, and &lt;code&gt;idxfn&lt;/code&gt; stores the binary data exported from the &lt;code&gt;ColorImagePoints&lt;/code&gt; resulted from &lt;code&gt;CoordinateMapper.MapDepthFrameToColorFrame()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example exporting code would look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;colorImagePoints&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ColorImagePoint&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;depthPixels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MapDepthFrameToColorFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DepthImageResolution&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depthPixels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ColorImageFormat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RgbResolution640x480Fps30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colorImagePoints&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteAllBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{0}_coloridx.dat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;colorImagePoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectMany&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BitConverter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BitConverter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="n"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With such alignment or rectification, we can repeat the experiment introduced in the last section with the optical photos now.&lt;/p&gt;
&lt;h2&gt;WorldToVolume matrix&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;WorldToVolume&lt;/code&gt; matrix is pretty like &lt;code&gt;WorldToCamera&lt;/code&gt; matrix, mapping the world coordinates to volume coordinates.
The comment in the SDK basically illustrate how the volume coordinate works, and it's as easy to use as the &lt;code&gt;WorldToVolume&lt;/code&gt; matrix,&lt;/p&gt;
&lt;p&gt;$\begin{bmatrix} x_v \\ y_v \\ z_v \\ 1 \end{bmatrix} = \begin{bmatrix} R &amp;amp; t \\ 0 &amp;amp; 1 \\ \end{bmatrix} * \begin{bmatrix} x_g \\ y_g \\ z_g \\ 1 \end{bmatrix} $.&lt;/p&gt;
&lt;p&gt;Note the $t$ in the matrix may be negative, because it's not necessary to store info too close to the camera.
And since the comment in the code mentions that the origin of the world coordinate system lies in the center of the front plane (i.e. z == 0 plane) in the volume, you may want to assign at least $2t$ space for the volume.&lt;/p&gt;
&lt;h2&gt;Raycasting for better depth&lt;/h2&gt;
&lt;p&gt;A smart way to use the KinectFusion is to extract depth map with better quality from the volume, rather than directly fetch it from the sensor.
Since the Truncated Signed Distance Function smoothes the surfaces among frames it's seen before, such extracted depth map would be more robust to sensor noise and missing values (which is a common problem for Kinect sensor).&lt;/p&gt;
&lt;p&gt;To extract such depth map, we need to first export the point cloud stored in the volume with the function &lt;code&gt;CalculatePointCloud()&lt;/code&gt; (with the &lt;code&gt;WorldToCamera&lt;/code&gt; matrix), and then map each 3D point to the camera imaging plane based on the external as well as internal matrices of the camera.&lt;/p&gt;
&lt;p&gt;Here are some results to give you a sense.&lt;/p&gt;
&lt;p&gt;&lt;img style="max-width: 320px" src="static/images/kinectfusion-original1.png" /&gt;
&lt;img style="max-width: 320px" src="static/images/kinectfusion-refined1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img style="max-width: 320px" src="static/images/kinectfusion-original2.png" /&gt;
&lt;img style="max-width: 320px" src="static/images/kinectfusion-refined2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img style="max-width: 320px" src="static/images/kinectfusion-original3.png" /&gt;
&lt;img style="max-width: 320px" src="static/images/kinectfusion-refined3.png" /&gt;&lt;/p&gt;</summary><category term="Kinect"></category><category term="Math"></category><category term="PhD"></category></entry><entry><title>C++ or MATLAB for research?</title><link href="http://grapeot.me/c-or-matlab-for-research.html" rel="alternate"></link><updated>2013-05-29T21:03:00-04:00</updated><author><name>Yan Wang</name></author><id>tag:grapeot.me,2013-05-29:c-or-matlab-for-research.html</id><summary type="html">&lt;p&gt;I used to be (and still am) a big fan of C#/C++, and wrote all the research codes in these languages. But after reading &lt;a href="http://stackoverflow.com/questions/8828860/why-is-matlab-so-popular-in-the-computer-vision-community-even-with-opencv-being/8832028#8832028"&gt;this post&lt;/a&gt; by &lt;a href="http://www.di.ens.fr/~duchenne/"&gt;Olivier Duchenne&lt;/a&gt; discussing about MATLAB's advantages, my view is changing and think MATLAB may be a better candidate for research...&lt;/p&gt;
&lt;h3&gt;Why did I like C#/C++ for research?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;High efficiency, much faster than MATLAB (10x~20x empirically).&lt;/li&gt;
&lt;li&gt;Also not hard to write code with neat grammar, e.g. stream operation, and lambda expressions. OpenCV also supports imread/imshow and lots of matrix operations.&lt;/li&gt;
&lt;li&gt;Flexibility and convenience to transfer to a real working system, with mature industry-level support, such as networking, database, parallel, regular expression, and GPU.&lt;/li&gt;
&lt;li&gt;Looks cool lol&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;And why may MATLAB be more suitable for research?&lt;/h3&gt;
&lt;p&gt;Research is different in building a system in that we don't know whether the algorithm will work beforehand. Therefore there will be a lot of trial and error involved. Prototyping, instead of building industry-level systems, is the daily work of researchers.&lt;/p&gt;
&lt;p&gt;Therefore MATLAB is suitable for&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Super fast prototyping. The program may be slow, but it works.&lt;/li&gt;
&lt;li&gt;(May be repeating the first point) Lots of high-level functions&lt;/li&gt;
&lt;li&gt;Less possible bugs (e.g. type casting) and easier debugging with less code and simpler language&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And if we agree that research is mainly about prototyping in the shortest time, the advantages of C#/C++ don't really matter here.&lt;/p&gt;
&lt;h3&gt;So any take-away messages?&lt;/h3&gt;
&lt;p&gt;Yes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No silver bullet. Analyze the need and pick up the right tool.&lt;/li&gt;
&lt;li&gt;Research is about prototyping so choose the tools for fast development and verification. Transfer to other platforms if really reaching the production/demo stage (which, to be honest, is pretty rare in research field)&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Sending Emails from Cygwin</title><link href="http://grapeot.me/sending-emails-from-cygwin.html" rel="alternate"></link><updated>2013-03-29T21:28:00-04:00</updated><author><name>Yan Wang</name></author><id>tag:grapeot.me,2013-03-29:sending-emails-from-cygwin.html</id><summary type="html">&lt;p&gt;Googled a lot but couldn't find tutorials about how to send emails from Windows command line. After playing with the mail tools in Cygwin, found it's pretty straightforward and put it up here for future reference.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install cygwin if you don't have it. (It's handy if you are familiar with the linux toolchain!). &lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;exim&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt;. You can both search for it in the searchbox, or expand "mail" item and find them manually.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;exim-config&lt;/code&gt; and then &lt;code&gt;email-config&lt;/code&gt; in cygwin command line. It's very straightforward to configure. Choose SMTP server, with no authentication, no TLS in the &lt;code&gt;email-config&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that's it. Try &lt;code&gt;echo This is a test email | email -s "test" foo@bar.com&lt;/code&gt; to test.&lt;/p&gt;
&lt;p&gt;Update: replace &lt;code&gt;email&lt;/code&gt; to &lt;code&gt;sendmail&lt;/code&gt; in ubuntu.&lt;/p&gt;</summary><category term="Cygwin"></category><category term="Linux"></category></entry><entry><title>Build a Small-World Fish-Eye Style Panorama</title><link href="http://grapeot.me/build-a-small-world-fish-eye-style-panorama.html" rel="alternate"></link><updated>2012-12-05T21:46:00-05:00</updated><author><name>Yan Wang</name></author><id>tag:grapeot.me,2012-12-05:build-a-small-world-fish-eye-style-panorama.html</id><summary type="html">&lt;p&gt;Sometimes a small-world panorama is quite stunning. For comparison, a regular panorama is shown below.&lt;/p&gt;
&lt;p&gt;&lt;img style="max-width: 50%" src="/static/images/panorama1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/panorama2.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;Spent about half an hour to do experiments and finally get a program to convert to regular panorama to small-world style.&lt;/p&gt;
&lt;p&gt;The key is coordinate system transform, from rectangular to polar. This is pretty intuitive to derive. For a point $(\psi, r)$ in the target image, its correspondence in the original panorama is $(\psi w / (2\pi), h - ry / r_0)$, where h, w is the height and width of the original image, and $r_0$ is the expected radius of the output. &lt;/p&gt;
&lt;p&gt;&lt;img style="max-width: 50%" src="/static/images/panorama3.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img style="max-width: 50%" src="/static/images/panorama4.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;Note we may need a nonlinear mapping for the radius to make the panorama more balanced. Here I choose the function $r_0^{-\epsilon} r^\epsilon$, where $\epsilon$ is a parameter to be tuned, controlling the "height" of the camera from the ground. You can see the difference between the two images above.&lt;/p&gt;
&lt;p&gt;Another style of small-world panorama is also easy to derive and implement as the following photo.&lt;/p&gt;
&lt;p&gt;&lt;img style="max-width: 50%" src="/static/images/panorama5.jpeg" /&gt;&lt;/p&gt;</summary><category term="Image"></category><category term="Math"></category><category term="PhD"></category></entry><entry><title>Efficiency comparison among several platforms for scientific computing</title><link href="http://grapeot.me/efficiency-comparison-among-several-platforms-for-scientific-computing.html" rel="alternate"></link><updated>2012-12-03T22:45:00-05:00</updated><author><name>Yan Wang</name></author><id>tag:grapeot.me,2012-12-03:efficiency-comparison-among-several-platforms-for-scientific-computing.html</id><summary type="html">&lt;p&gt;[Update2] I used the library &lt;a href="http://eigen.tuxfamily.org/index.php?title=Main_Page"&gt;eigen&lt;/a&gt; to reimplement the algorithm, reducing the code from 84 lines to 41 lines (wow), and time increases 11%. Looks acceptable, with similar workload as unoptimized C#, but the same speed as heavily optimized C# (with 164 lines of code and unsafe compilation). What's even better is eigen is a header library requires no pre-building or linking. &lt;/p&gt;
&lt;p&gt;Looked at Boost for a while yesterday and also found similar usage of lambda expression and smart pointers as in C#. Considering C++ as an option for the future seriously... &lt;/p&gt;
&lt;p&gt;[Update] I further optimized the C# code and made its speed from 204ms to 124ms. The same trick made C++ implementation from 124ms to 105ms. This makes me prefer C# more. The code is also updated on github.&lt;/p&gt;
&lt;p&gt;Please consult the &lt;a href="http://prezi.com/6wpbvnq56ddn/efficiency-comparison-of-scientific-computing-among-different-languages/"&gt;prezi slides&lt;/a&gt;. Basically the conclusions are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MATLAB sort of astonishes me. I guessed it should be the fastest with the sophisticatedly optimized matrix library.&lt;/li&gt;
&lt;li&gt;For loops turn to be "speed killer" in MATLAB and Python. On the contrary, C family languages are able to optimize such loops well.&lt;/li&gt;
&lt;li&gt;It's also a bit surprising to see C# only costs twice the time as C++. But only limited to tedious imperative style without using any libraries.&lt;/li&gt;
&lt;li&gt;Functional style (map for Python, arrayfun for MATLAB, LINQ for C#) and imperative style (for for all the three languages) make no difference for MATLAB, but C# prefers imperative style, while Python favors functional style.&lt;/li&gt;
&lt;li&gt;I'd use C# for its flexibility from dev speed to running speed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Code is available on &lt;a href="https://github.com/grapeot/EfficiencyComparison"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;div&gt;
&lt;object id="prezi_6wpbvnq56ddn" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="550" height="400" name="prezi_6wpbvnq56ddn" &gt;
&lt;param name="movie" value="http://prezi.com/bin/preziloader.swf"&gt;
&lt;param name="allowfullscreen" value="true"&gt;
&lt;param name="allowFullScreenInteractive" value="true"&gt;
&lt;param name="allowscriptaccess" value="always"&gt;
&lt;param name="wmode" value="direct"&gt;
&lt;param name="bgcolor" value="#ffffff"&gt;
&lt;param name="flashvars" value="prezi_id=6wpbvnq56ddn&amp;amp;lock_to_path=0&amp;amp;color=ffffff&amp;amp;autoplay=no&amp;amp;autohide_ctrls=0"&gt;&lt;embed id="preziEmbed_6wpbvnq56ddn" type="application/x-shockwave-flash" width="550" height="400" src="http://prezi.com/bin/preziloader.swf" name="preziEmbed_6wpbvnq56ddn" allowfullscreen="true" allowfullscreeninteractive="true" allowscriptaccess="always" bgcolor="#ffffff" flashvars="prezi_id=6wpbvnq56ddn&amp;amp;lock_to_path=0&amp;amp;color=ffffff&amp;amp;autoplay=no&amp;amp;autohide_ctrls=0" style="width: 550px; height: 400px;"&gt;
&lt;/object&gt;
&lt;/div&gt;</summary><category term="PhD"></category></entry><entry><title>New features of Beamer Writer</title><link href="http://grapeot.me/new-features-of-beamer-writer.html" rel="alternate"></link><updated>2012-09-08T00:09:00-04:00</updated><author><name>Yan Wang</name></author><id>tag:grapeot.me,2012-09-08:new-features-of-beamer-writer.html</id><summary type="html">&lt;p&gt;Finally time for an upgrade of our &lt;a href="http://lab.grapeot.me/beamer/"&gt;Beamer Writer&lt;/a&gt;. I added two features recently.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support of  equations. Now when you enter &lt;code&gt;\[x^2\]&lt;/code&gt; in the input textbox, it will be rendered as it is, i.e.,  &lt;code&gt;\[x^2\]&lt;/code&gt; rather than &lt;code&gt;\item \[x^2\]&lt;/code&gt; like we did before. This will make inserting equations easier.&lt;/li&gt;
&lt;li&gt;Support for figures. &lt;code&gt;[[fig2.png]]&lt;/code&gt; will be recognized as a figure and be rendered as &lt;code&gt;\\ \medskip { \includegraphics[width=0.6\textwidth]{fig2.png} \\ }&lt;/code&gt; to provide an image with proper margins. This simplifies the figure insertion.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, that's it. Enjoy!&lt;/p&gt;</summary></entry><entry><title>Host paper reading seminars with github</title><link href="http://grapeot.me/host-paper-reading-seminars-with-github.html" rel="alternate"></link><updated>2012-08-30T22:57:00-04:00</updated><author><name>Yan Wang</name></author><id>tag:grapeot.me,2012-08-30:host-paper-reading-seminars-with-github.html</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/"&gt;Github&lt;/a&gt; is a well-known tool within the dev community. People use git(http://git-scm.com/) and github to collaboratively build awesome stuffs and also enjoy the social life (xD, geeks). I find it also useful in our daily research, say, to host a paper reading seminar. (I assume you are familiar with git in the following text)&lt;/p&gt;
&lt;p&gt;As a version control system, github is good at managing the codes, for example, LaTeX docs. With different branches, people can try different ideas in the writing, while still keep the master branch neat and ready to present at any time. As a user-friendly git-based community, github provides elegant web interfaces for git, with other necessary features such as wiki, issue tracker, as well as easy ways to generate project pages. Today we are talking about how to use these two features (git branch and github pages) to host a paper reading seminar with little effort.&lt;/p&gt;
&lt;p&gt;Let's start from the &lt;a href="http://pages.github.com/"&gt;pages&lt;/a&gt; of github. It's a quick way to generate a set of theme-enabled pages from the simple &lt;a href="http://en.wikipedia.org/wiki/Markdown"&gt;mark-down language&lt;/a&gt;. This provides a good option for a seminar page, where we can present list of papers, a brief introduction, notifications about time/location, and also slides. Since github is a git-based website, the page has a "download" button by default, linking to the content of the associated git repository. (This doesn't bother .git directory, will only deliver the latest content without any version control information.) Therefore it's natural to put the slides in the git repo, so that the slides will be compressed and delivered to the user when s/he clicks the download button.&lt;/p&gt;
&lt;p&gt;Given I'm using beamer/LaTeX to write slides efficiently, using git to track them is also a good idea. However, we don't wish to mess up the hosted slides with the LaTeX source code. Anyway, readers are not interested in how the slides are written and compiled. Then here comes the branch. We can put the compiled slides in the master branch, which will be downloaded by default, and the source code in another branch. This way we can split our "development" with the final "release".&lt;/p&gt;
&lt;p&gt;Then we are ready for the overall receipt. First use our &lt;a href="http://lab.grapeot.me/beamer/"&gt;beamer writer&lt;/a&gt; to generate beamer codes efficiently. Revise the code a little bit locally and track the changes with git in a branch other than master (say, a branch named "LaTeX"). When you are ready to go, compile the pdf slides in the master branch, push it to github, and create a page. That's it. You can also update the slides after that (stay focused and keep shipping yaaaayy) and push the latest changes to the git repo.&lt;/p&gt;
&lt;p&gt;So &lt;a href="http://grapeot.github.io/prs120828/"&gt;here&lt;/a&gt; is a sample page about our paper reading seminar. Convenient page generation, native version control with git, slides hosting... And even automatic slides compilation with git hooks. What else can you demand from these free tools?&lt;/p&gt;</summary><category term="github"></category><category term="PhD"></category></entry><entry><title>F# Revisited</title><link href="http://grapeot.me/f-revisited.html" rel="alternate"></link><updated>2012-05-16T02:55:00-04:00</updated><author><name>Yan Wang</name></author><id>tag:grapeot.me,2012-05-16:f-revisited.html</id><summary type="html">&lt;p&gt;I was interested in F# because of some of its fun usages, and the ease to do asynchronous and parallel computing. Used F# to implement some domain specific language like Turtle and fractal effect this afternoon. Basically the tasks themselves are nearly the same as this post and this post, some own thoughts were inspired.&lt;/p&gt;
&lt;p&gt;Let's first see some examples. For the turtle system, below is a command sequence (actually a linked list) for drawing a triangle:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;koch1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nc"&gt;Fwd&lt;/span&gt; &lt;span class="mi"&gt;243&lt;/span&gt;&lt;span class="o"&gt;.;&lt;/span&gt; &lt;span class="nc"&gt;Right&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="o"&gt;.;&lt;/span&gt; &lt;span class="nc"&gt;Fwd&lt;/span&gt; &lt;span class="mi"&gt;243&lt;/span&gt;&lt;span class="o"&gt;.;&lt;/span&gt; &lt;span class="nc"&gt;Right&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="o"&gt;.;&lt;/span&gt; &lt;span class="nc"&gt;Fwd&lt;/span&gt; &lt;span class="mi"&gt;243&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's easy to understand, first draw a line with length 243 pixels along the current direction, and then turn right 120 degrees, draw another line with length of 243 pixels and turn 120 degrees again, following by the final edge with length 243 pixels.&lt;/p&gt;
&lt;p&gt;What I want to emphasize is, this is a simple language, a so-called domain-specific language (DSL). It's extremely easy to implement some embedded DSLs inside F# due to its flexible syntax.&lt;/p&gt;
&lt;p&gt;Let's see some amazing  sample usage of this tiny language with only 3 keywords and 1 data type. The following function takes a command sequence as input, and "expand" it as a longer one. More specifically, this function is used to expand a straight line into a certain line segment as follows:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="static/images/f-sharp-revisited-1.png" /&gt;&lt;/p&gt;
&lt;p&gt;Code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;kochChange&lt;/span&gt; &lt;span class="n"&gt;drawing&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;drawing&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Fwd&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nc"&gt;Fwd&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nc"&gt;Left&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nc"&gt;Fwd&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nc"&gt;Right&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nc"&gt;Fwd&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nc"&gt;Left&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nc"&gt;Fwd&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the parameter acc is a dummy one, making it suit the interface of List.fold below. Then We can simply draw some amazing fractal shape easily:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fold&lt;/span&gt; &lt;span class="n"&gt;kochChange&lt;/span&gt; &lt;span class="n"&gt;koch1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note &lt;code&gt;koch1&lt;/code&gt; is defined before to draw a triangle, therefore this statement expands a triangle with the rule shown above recursively, and produce a command list for the following figure:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="static/images/f-sharp-revisited-2.png" /&gt;&lt;/p&gt;
&lt;p&gt;The complete code is available in my github. The famous Mandelbrot set is also easy to draw with this code, with asynchronous and parallel computing enabled.&lt;/p&gt;
&lt;p&gt;After this exercise, I feel more comfortable to use F# and find it appealing in the following aspects:&lt;/p&gt;
&lt;p&gt;Lightweight yet rich type definition. New types or structures can be defined neatly and even within one line. Examples are like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Fwd&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Left&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Right&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;MandelbrotResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;DidNotEscape&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Escaped&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This makes the extensive usage of object-oriented style very easy. For example, use a new enumeration as place holders in DSLs, like this post illustrates.&lt;/p&gt;
&lt;p&gt;Compact yet flexible syntax. The unique syntax like pattern matching, treating tuple as first class component makes it easy to write intuitive logic within one to two lines, while other languages may need 10 lines. For example, the following code computes the Mandelbrot iteration result of a given complex number, and return the iteration number if it's convergent, otherwise output 0:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;mandelbrot&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Complex&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;DidNotEscape&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Escaped&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Convenient collection interfaces. F# not only supports traditional functional ones like map, filter, fold, and also lazy sequence generation. The keywords like yield makes long LINQ statements in C# like nested SelectMany and Select pretty easy and intuitive to write. An example is the kochChange function above.&lt;/p&gt;
&lt;p&gt;Easy asynchronous and parallel programming, such as non-blocked operations, parallel operations, etc. This is clearly illustrated in Don's post.&lt;/p&gt;
&lt;p&gt;Overall, F# is a pretty interesting language, lightweight, powerful, and neat. And finally I feel sort of mastering it... Will further explore its potential for scientific computing and possibly updated again soon.&lt;/p&gt;</summary></entry><entry><title>Thoughts about convex optimization</title><link href="http://grapeot.me/thoughts-about-convex-optimization.html" rel="alternate"></link><updated>2012-05-11T03:02:00-04:00</updated><author><name>Yan Wang</name></author><id>tag:grapeot.me,2012-05-11:thoughts-about-convex-optimization.html</id><summary type="html">&lt;p&gt;Just finished the final of convex optimization. This is really an interesting course, which even changed the way I'm looking at this world. In college, I was thinking in an algorithmic way, i.e., to solve a problem, will try to design some certain steps, following which we can get a result somehow satisfying our expectation. But now, I'd first spend quite a bit time on the expectation itself, expressing them in the way "what to minimize" and "subject to what constraints". Then simply feed them to convex optimization solvers. &lt;/p&gt;
&lt;p&gt;That is, convex optimization provides a general modeling language, with which it can be ensured to get an answer efficiently. It makes the modeling process intuitive and effective, and is the most important practical branch of mathematics in my humble opinion. &lt;/p&gt;
&lt;p&gt;I used image denoising as the example for quite a few algorithms in the blog [post1, post2, post3], and demonstrated how different algorithms help improve the performance. But what if we treat it as a optimization problem? We wish to have less effort to fix/change the image, and the fixed image tends to have smoother changes, i.e. less variations. This is a typical problem named total variation reconstruction, trying to minimize a weighted sum of some L1 norms, and it's convex! By writing 4 lines of MATLAB code, we get this result: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="static/images/convex-denoising-result.png" /&gt;&lt;/p&gt;
&lt;p&gt;The left one is the noisy image, while the right is the recovered one. Compared with the result from Loopy Belief Propagation, the improvement is obvious. So we can see that the optimization approach is intuitive to model, fast to implement, and easier to debug. The code written with &lt;a href="http://cvxr.com/cvx/"&gt;CVX&lt;/a&gt;, a MATLAB convex optimization package, is put as follows for the record. We can see how elegant it is. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cvx_begin&lt;/span&gt; 
    &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="n"&gt;minimize&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(:,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(:,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="n"&gt;cvx_end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As a heavy .NET user, I tried to find .NET version of optimization problem solvers (due to licensing issues of MATLAB). &lt;a href="http://msdn.microsoft.com/en-us/devlabs/hh145003"&gt;Microsoft Solver Foundation&lt;/a&gt; looks a good candidate, also supporting a neat and expressive language named OML just like CVX does, and free for academic users. But I still haven't figured out how to use it. &lt;a href="http://www.gurobi.com/"&gt;Gurobi&lt;/a&gt; looks simple and powerful too, although haven't tried it. Anyway, CVX is certainly a good start point. &lt;/p&gt;
&lt;p&gt;If you get interested in convex optimization, Steven Boyd's course &lt;a href="http://www.stanford.edu/class/ee364a/"&gt;Convex Optimization&lt;/a&gt; is definitely a good (possibly the best) resource, with the textbook also from Steven &lt;a href="http://www.stanford.edu/~boyd/cvxbook/"&gt;here&lt;/a&gt;. If don't feel like much theory, skimming the exercises in the book and the &lt;a href="http://www.stanford.edu/~boyd/cvxbook/bv_cvxbook_extra_exercises.pdf"&gt;additional exercises&lt;/a&gt; about your area may be enough.&lt;/p&gt;</summary><category term="PhD"></category><category term="Math"></category></entry></feed>